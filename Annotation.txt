■■■ Anotation(어노테이션) ■■■

○ 개요
   - 일종의 주석(사전적인 의미 : 주석 달기, 메타 데이터)
   - 메타 데이터 : 데이터를 부연 설명하기 위한 데이터
   - 주석의 지속성
     : *.java(소스 레벨) → [컴파일러(Compiler)] → *.class → [JVM : Runtime]
       이 과정에서 보통 컴파일이 되면 주석이 제거
       (//, /*...*/, /**...*/)
   - 『@』 : Annotation, JDK1.5(JavaSE 5.0)부터 사용 가능, Runtime 까지도 존재
   - AT(Annotation Type)

○ 메타 데이터의 가치
   일반적으로 메타 데이터의 효용은 다음의 세 가지로 나눌 수 있다. 
   문서화, 컴파일러 체크, 코드 분석.

   - 모든 레벨의 문서화는 가장 자주 인용되는 사용법이다.
     메타 데이터는 메소드가 다른 메소드에 의존하고 있다는 것을 알려주는 유일한 방법을 제공한다.
     또한 그들이 불완전한지 특정 클래스가 또 다른 클래스를 레퍼런싱하는지 등을 알려준다.
     이는 유용하지만 문서화는 메타 데이터를 자바에 추가하는 것과 가장 관련이 적은 항목이다.
     코드의 문서화에 있어서는 Javadoc라는 사용이 쉽고 강력한 방식을 제공하고 있기 때문이다.
   - 컴파일러 체크
     보다 중요한 메타 데이터의 장점은 컴파일러가 메타 데이터를 사용하여 
     몇 가지 기본적인 컴파일 시간 체크를 수행할 수 있는 기능이라고 할 수 있다.
     예를 들어, Override 어노테이션을 이용하여 슈퍼 클래스의 메소드가 재정의된 것을 기술,
     자바 컴파일러는 메타 데이터에서 알려주는 작동이 실제로 코드 레벨에서 발생한다는 것을 확인할 수 있다

   - 코드 분석
     좋은 어노테이션 또는 메타 데이터 툴의 최고의 기능은 여분의 데이터를 사용하여 코드를 분석하는 것이다
     간단한 경우 코드 목록을 구현하고 필요한 인풋 유형을 제공하고 리턴 유형을 제시한다
     하지만 자바 리플렉션도 같은 기능을 제공한다고 생각할 수도 있다.
     결국 이 모든 정보에 대한 코드를 검사할 수 있다.
     표면적으로 볼 때 그럴듯하지만 실제로 그렇지 않다.
     많은 경우 메소드는 인풋으로 받아들이거나 아웃풋으로 리턴한다.
     이는 메소드가 원하는 것이 아니다.
     예를 들어 매개변수 유형이 Object 이지만 메소드는 Integer를 사용해서만 작동한다.
     이는 메소드가 겹쳐 쓰기된 곳에서 쉽게 발생할 수 있다.
     그리고 슈퍼 클래스가 메소드를 일반 매개변수로 선언하던가,
     많은 직렬화가 진행되는 시스템에서도 쉽게 발생한다.
     두 경우 모두 메타 데이터는 코드 분석 툴을 지정할 수 있다.
     매개변수 유형이 Object 이더라도 정말로 원하는 것은 Integer라는 것을 나타낼 수 있다.
     이러한 종류의 분석은 상당히 유용하며 그 가치는 상당하다.
     
     보다 복잡한 경우 코드 분석 툴은 모든 종류의 추가 태스크들을 수행할 수 있다.
     그 예 중 하나가 Enterprise JavaBean(EJB) 컴포넌트이다.
     심지어 간단한 EJB 시스템도 의존성과 복잡성은 상당하다.
     로컬 인터페이스이면서 로컬 홈 인터페이스가 될 가능성과 함께 홈 인터페이스와 원격 인터페이스를 얻는다.
     이 모든 클래스들을 연동시키는 것은 많이 힘들다
     하지만 메타 데이터는 이 문제에 대한 솔루션을 제공한다
     좋은 툴은 이 모든 의존성을 관리하면서 코드-레벨 연결이 없지만 
     코드-레벨 관계를 가진 클래스들이 연동될 수 있도록 한다
     이것이 바로 메타 데이터의 진정한 가치라고 할 수 있다.

○ Annotation의 종류
   
     1) Mark Annotation
	변수가 없다. 이 어노테이션은 이름으로 구분되며 추가 데이터 없이 나타난다
	예를 들어 @MarkerAnnotation은 marker 어노테이션이다
	데이터가 없으며 단지 어노테이션 이름만 있을 뿐이다
	ex) @Stateless

     2) Single-value Annotation
	marker와 비슷하지만 데이터를 제공한다
	싱글 비트 데이터를 제공하기 때문에 간단한 신택스를 사용할 수 있따.
	(단, 어노테이션 유형이 이 문법을 수용해야 함)
	: @SingleValueAnnotation("my data")
	  → 이는 @ 표시만 제외하고는 일반적인 자바 메소드 호출과 비슷하다.
	ex) @Resource("mappedName=PERSON")

     3) Full Annotation(Multi value Annotation)
	다중 데이터 멤보를 갖고 있다.
	결과적으로 전체 신택스를 사용해야한다.
	(그리고, 어노테이션은 일반 자바 메소드와 더 이상 비슷하지 않다)
	: @FullAnnotation(var1="data value1", var2="data value2", var3="data value3")

     4) Custom Annotation 구현
	: 개발자가 직접 Annotation을 구현
	ex)
	public @interface TODO		// single-value Annotation
	{
		String value();		// value가 아닌 이름을 사용하면
	}				// 사용시 메소드 이름을 써준다.

	// @TODO("Something todo")

	public @interface TODO		// Single-value Annotation
	{
		String msg();		// value가 아닌 이름을 사용한 경우
	}

	// @TODO(msg="Something todo")

○ Annotation을 구분하는 또 다른 기준

     1) Simple Annotation
	메소드나 변수 위에 붙이는 일반적인 Annotation

     2) Meta Annotation
	Annotation의 Annotation(한 Annotation위에 다른 Annotation 설정)

※ Meta Anntation

     1) @Target Annotation
	작성한 Annotation이 어디에서 사용하게 될지를 결정

        @Target(
	{
		ElementType.Type			// 클래스, 인터페이스, enum
		, ElementType.METHOD			// 생성자를 제외한 모든 메소드
		, ElementType.CONSTRUCTOR		// 생성자
		, ElementType.ANNOTATION_TYPE		// 메타 Annotation
	})

     2) @Retention Annotation
	@Retention Annotation([속성값])
	작성한 Annotation의 지속성을 설정
	
	- RetentionPosicy.SOURCE 
	  : 컴파일러가 컴파일 시 삭제하여 클래스 파일에 저장되지 않는다
	- RetentionPosicy.CLASS
	  : 클래스 파일에 저장되지만 JVM은 무시
	- RetentionPosicy.RUNTIME
	  : 클래스 파일에 저장되고 JVM은 유지

○ 내장(Built-in) Annotation( ※ java.lang.* 에 정의된 3개의 표준 어노테이션)

     1) @Override
	슈퍼 클래스의 메소드를 오버라이드
	
	public class OverrideTest
	{
		public OverrideTest() { }

		@Override
		public String toString()
		{
			return super.toString() + "[Override Test Implementation]";
		}

		@Override
		public int hashCode()
		{
			return toString().hashCode();
		}
	}

     2) @Deprecated
	@Override와 마찬가지로 @Deparecated는 marker 어노테이션이다
	@Deprecated 를 사용하여 더 이상 사용되지 말아야 할 메소드에 주석을 부여한다
	@Override와 다른 점은, @Deparecated는 더 이상 사용되지 말아야 하는
	(deparecated) 메소드와 동일한 라인상에 놓여져야 한다

	public class DeprecatedClass
	{
		@Deprecated public void doSomething()
		{
			//... 실행 코드
		}

		public void doSomethingElse()
		{
			//... 실행 코드
			// doSomething() 메소드를 사용하는 것 보다
			// 향상된 형태의 코드
			
		}
	}

     3) @SuppressWarnings
	번거로운 경고를 제거한다
	Override나 Deprecated와는 다르게 @SuppressWarnings는 변수를 갖고 있다
	따라서 이를 작동하게 하려면 싱글-어노테이션 유형으로 사용해야 한다
	값 어레이로서 변수를 제공할 수 있다.
	각각 삭제할(Suppress) 특정 유형의 경고를 나타낸다

	@SuppressWarnings(value="unchecked")
	public void nonGenericMethod()
	{
		List wordList = new ArrayList();
		wordList.add("foo");
	}


---------------------------------------------------------------------------------------------------------------------------

?

■■■ Spring Annotation ■■■

?

○ 개요

     Spring Framework는 JAVA 5+부터 Annotation을 제공하며

     Annotation의 사용으로 설정 파일을 간결화하고

     객체 또는 메소드의 매핑을 명확하게 처리할 수 있다

?

○ @Component

     - 패키지 : org.springframework.streotype

     - 버전 : spring 2.5

     - 개요

       : 『<context:component-scan>』 태그를 설정 파일에 추가하면

         해당 어노테이션이 적용된 클래스를 빈으로 등록하게 된다

         범위는 디폴트로 싱글톤(singletom)이며  『@Scope』를 사용하여 지정할 수 있따

     - 설정 위치 : 클래스 선언부 위

     - 추가 설정

       : XML 설정 파일에 『<context:componoent-scan>』 을 정의하고

         적용할 기본 패키지를 『<base-package>』 속성으로 등록한다

         『<context:component-scan>』 태그를 사용하면

         @Component, @Required, @Autowired 등의 어노테이션이 함께 적용된다

 

         예를 들면 『<context:component-scan base-package="xxx">』 에서

         xxx 패키지 하위에서 @Component 로 선언된 클래스를 Bean으로 자동 등록한다

         Bean의 이름은 해당 클래스명(첫 글자는 소문자)이 사용된다

 

         『<context:component-scan>』 요소에는 scopped-proxy 속성이 존재한다

         scoped-proxy 속성은 <aop:scopped-proxy/> 요소처럼

        WebApplicationContext 에서만 유효하며

         "session", "globalSession", "request" 이외의 scope는 무시되며 다음의 3가지 값을 설정할 수 있다

         · no : proxy를 설정하지 않는다(기본값)

         · interfaces : JDK Dynamic Proxy를 이용한 Proxy 생성

         · targetClass : 클래스에 대해 프록시를 생성(CGLIB 를 이용한 Proxy 생성)

     - 사용 예

       @Component

       @Scope("prototype")      //-- 생략하면 싱글톤

       public class Test

       {

              //....

        }

?

○ @Required

      - 패키지 : org.springframework.beans.factory.annotation

      - 버전 : spring 2.0

      - 개요

         : @Required 어노테이션은 필수 프로퍼티임을 명시하는 것으로

           필수 프로퍼티를 설정하지 않을 경우 빈 생성 시 예외를 발생시키게 된다

      - 설정 위치 : setter 메소드

      - 추가 설정

         : <bean class="org.springframework.beans.factory.annotation

                                    .RequiredAnnotationBeanPostProcessor"> 클래스를 빈으로 등록시켜줘야 한다

           해당 설정 대신에 『<context:annotation-config>』 태그를 사용해도 된다

           『<context:annotation-config>』 태그는

           어노테이션과 관련하여 다음의 BeanPostProcessor를 함께 등록한다

          · @Required(RequiredAnnotationBeanPostProcessor)

          · @Autowired(AutowiredAnnotationBeanPostProcessor)

          · @Resource, @PostConstruct, @PreDestory(CommonAnnotationBeanPostProcessor)

          · @Configulation(ConfigulationClassPostProcessor)

?

          ① 1단계 : 코드 내에 프로퍼티 설정 메소드에  『@Required』 어노테이션을 붙인다

               public class TestBean

               {

                          private TestDAO testDao;

?

                           @Required    // ◀◀◀

                           public void setTestDAO(TestDAO testDao)

                           {

                                        this.testDao = testDao;

                            }

                }

          ② 2단계 : 스프링 설정 파일에 RequiredAnnotationBeanPostProcessor 클래스를 빈으로 등록한다

                <bean class="org.springfamework.beans.factory.annotation.RequiredAnnotationBeanpostProcessor"/>

                <bean name="testBean" class="com.test.TestBean">

                            <!--

                                『@Required』 어노테이션을 적용하였으므로 설정하지 않을 경우 예외를 발생시키게 된다.

                             -->

                            <property name="testDao" ref="testDao">

                </bean>

                RequiredAnnotationBeanPostProcessor 클래스는 스프링 컨테이너에 등록된 bean 객체를 조사하여 

                @Required 어노테이션으로 설정되어있는 프로퍼티에 대해 값이 제대로 설정되어 있는지 검사하고

                설정되어 있지 않으면 bean 생성 시 예외를 발생시키게 된다

?

                RequiredAnnotationBeanPostProcessor 클래스를 빈으로 등록하지 않고

                『<context:annotation-config>』와 같이 태그를 이용할 수도 있다.

?

              <?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"

xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

xmlns:p="http://www.springframework.org/schema/p"

xmlns:context="http://www.springframework.org/schema/context"

xsi:schemaLocation="

http://www.springframework.org/schema/beans

http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

http://www.springframework.org/schema/context

http://www.springframework.org/schema/context/spring-context-3.0.xsd">

<context:component-config />

?

</beans>

?

○ @Autowired

     - 패키지 : org.springframework.beans.factory.annotation

     - 버전 : spring 2.5

     - 개요

        : @Autowired 어노테이션은 의존관계를 자동 설정할 때 사용하며 

           타입을 이용하여 의존하는 객체를 삽입해 주도록 처리한다

           그러므로 해당 타입의 빈 객체가 존재하지 않거나 또는 2개 이상 존재할 경우 스프링은 예외를 발생시키게 된다

     - 설정 위치 : 생성자, 필드, 메소드 (setter 가 아니어도 무방하다)

     - 추가 설정

       : <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

         클래스를 빈으로 등록시켜 주어야 한다

         해당 설정 대신에 『<context:annotation-config/>』   태그를 사용해도 된다

     - 옵션

        : required- @Autowired 어노테이션을 적용한 프로퍼티에 대해

          설정할 필요가 없는 경우에 false 값을 주며

          이 때, 해당 프로퍼티가 존재하지 않더라도 스프링은 예외를 발생시키지 않는다

          『@Autowired(required=false)』로 선언한다( 기본값을 true)

     - 특징

        byType 으로 의존관계를 자동으로 설정할 경우

        같은 타입의 빈이 2개 이상 존재하면 예외가 발생하게 되는데

        @Autowired 도 이러한 문제가 발생한다

        이럴 경우 @Qualifier를 사용하면 동일한 타입의 빈 중 특정 빈을 사용하도록 하여 문제를 해결할 수 있다

?

         @Autowired

         @Qualifier("test")

         private Test test;

?

○ @Qualifier

      - 패키지 : org.springframework.beans.factory.annotation

      - 버전 : spring 2.5

      - 개요

         : @Qualifier 어노테이션은 @Autowired 의 목적에서

           동일 타입의 빈 객체가 존재할 경우 특정 빈을 삽입할 수 있게 설정한다

           @Qualifier("mainBean")의 형태로 @Autowired와 같이 사용하며

           해당 <bean> 태그에 <qualifier value="mainBean"/> 태그를 선언해 주어야 한다

           메소드에서 두 개 이상의 파라미터를 사용할 경우에는 

          그 파라미터 앞에 선언해야 한다

     - 설정 위치 : @Autowired 어노테이션과 함께 사용

     - 추가 설정 : 동일 타입의 빈 객체 설정에서 『qualifier value="[alias명]"/>』를 추가해 준다

     - 옵션 : name - alias ㅁㅇ

?

○ @Resource

     - 개요

        : 자바 6 버전 및 JEE 5 버전에 추가된 것으로

          어플리케이션에서 필요로하는 자원을 자동 연결할 때 사용한다

          스프링 2.5 부터 지원하는 어논테이션으로

          스프링에서는 의존하는 빈 객체를 전ㄷㄹ할 때 사용한다

          @Autowired 와 같은 기능을 수행하며

          @Autowired 와의 차이점은 @Autowired는 타입으로(byType), 

          @Resource 는 이름으로(byName) 연결을 수행한다는 것이다

     - 설정 위치 : 프로퍼티, setter 메소드

     - 추가 설정
	: 『<bean class="org.springframework.beans.factory.annotation.CommonAnnotationBeanPostProcessor"/>』
	  클래스를 빈으로 등록시켜 주어야 한다
	  해당 설정 대신에 『<context:annotation-config/>』 태그를 사용해도 된다
     - 옵션 : name
	name 속성에 자동으로 연결될 빈 객체의 이름을 입력한다
	@Resource(name="testDao")
	CommonAnnotationBeanPostProcessor 클래스를
	설정 파일에 빈 객체로 등록하여 어노테이션을 적용시키게 된다

○ @PostConstruct

     - 패키지 : javax.annotation
     - 버전 : jdk 1.6, spring 2.5
     - 개요
       : 의존하는 객체를 설정한 이후에 초기화 작업을 수행하기 위해 사용
     - 설정 위치 : 초기화 작업 수행 메소드
     - 추가 설정
       : 『<bean class="org.springframework.beans.factory.annotation.CommonAnnotationBeanPostProcessor"/>』 클래스를
	 빈으로 등록시켜 주어야 한다
	 해당 설정 대신에 『<context:annotation-config/>』태그를 사용해도 된다

○ @PostConstruct

     - 패키지 : javax.annotation
     - 버전 : jdk 1.6, spring 2.5
     - 개요
       : 컨테이너에서 객체를 제거하기 전에 해야할 작업을 수행하기 위해 사용
     - 설정 위치 : 해당 작업 수행 메소드
     - 추가 설정
       : 『<bean class="org.springframework.beans.factory.annotation.CommonAnnotationBeanPostProcessor"/>』 클래스를
	 빈으로 등록시켜 주어야 한다
	 해당 설정 대신에 『<context:annotation-config/>』태그를 사용해도 된다

?

?


